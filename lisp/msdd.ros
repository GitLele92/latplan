#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros dynamic-space-size=8000 -Q -L sbcl -- $0 "$@"
|#
(progn ;;init forms
  #+quicklisp (ql:quickload '(iterate alexandria trivia.ppcre immutable-struct swank) :silent t)
  )

(defpackage :msdd
  (:use :cl :iterate :alexandria :trivia :trivia.ppcre)
  (:shadowing-import-from :immutable-struct :ftype :defstruct))
(in-package :msdd)
(SETF *ARITY-CHECK-BY-TEST-CALL* NIL)
;;; set up the learning data

(defun read-as-bvs (csv)
  (iter (for line in-file csv using #'read-line)
        (for bv = (iter (for o in-stream (make-string-input-stream line))
                        (collect o result-type bit-vector)))
        (when (plusp (length bv))
          (collect bv))))

(defun bvs-array (bvs)
  (let ((batch (length bvs))
        (w (/ (length (first bvs)) 2)))
    (let* ((arm (make-array (* batch 2 w)  :element-type 'bit))
           (a (make-array (list batch 2 w) :element-type 'bit :displaced-to arm)))
      (iter (for b below batch)
            (for bv in bvs)
            (replace arm bv :start1 (* b 2 w) :end1 (* (1+ b) 2 w)))
      a)))

;;; search data structure

(deftype sf () 'single-float)

(defun multitoken (width)
  (make-array width :initial-element 1 :element-type 'bit :adjustable nil :fill-pointer nil))

(defun copy-multitoken (mt1)
  (let ((mt2 (multitoken (length mt1))))
    (replace mt2 mt1)
    mt2))

(defun required ()
  (error "missing required argument"))

(defstruct node
  ;; (precursor (required) :type (simple-array bit))
  ;; (successor (required) :type (simple-array bit))
  (data (required) :type simple-bit-vector)
  (mask (required) :type simple-bit-vector))

(declaim (inline node-precursor))
(ftype node-precursor node bit-vector)
(defun node-precursor (node)
  (ematch node
    ((node data)
     (make-array (/ (length data) 2)
                 :element-type 'bit
                 :displaced-to data))))

(declaim (inline node-precursor-*))
(ftype node-precursor-* node bit-vector)
(defun node-precursor-* (node)
  (ematch node
    ((node data)
     (make-array (/ (length data) 2)
                 :element-type 'bit
                 :displaced-to data))))


(declaim (inline node-successor))
(ftype node-successor node bit-vector)
(defun node-successor (node)
  (match node
    ((node data)
     (let ((width (/ (length data) 2)))
       (make-array width
                   :element-type 'bit
                   :displaced-to data
                   :displaced-index-offset width)))))


(declaim (inline node-successor-*))
(ftype node-successor-* node bit-vector)
(defun node-successor-* (node)
  (match node
    ((node data)
     (let ((width (/ (length data) 2)))
       (make-array width
                   :element-type 'bit
                   :displaced-to data
                   :displaced-index-offset width)))))

;;; node evaluation functions

(ftype wickens-cooccurence-g sf sf sf sf sf)
(defun wickens-cooccurence-g (n1 n2 n3 n4)
  "Wickens, T. D. 1989. Multiway Contingency Tables Analysis for the Social Sciences. Lawrence Erlbaum Associates."
  (let* ((1/all (/ (+ n1 n2 n3 n4)))
         (r1 (+ n1 n2))
         (c1 (+ n1 n3))
         (r2 (+ n3 n4))
         (c2 (+ n2 n4))
         (n1^ (* r1 c1 1/all))
         (n2^ (* r1 c2 1/all))
         (n3^ (* r2 c1 1/all))
         (n4^ (* r2 c2 1/all)))
    (* 2
       (+ (* n1 (log (/ n1 n1^)))
          (* n2 (log (/ n2 n2^)))
          (* n3 (log (/ n3 n3^)))
          (* n4 (log (/ n4 n4^)))))))

(ftype msdd-gmax1 sf sf sf sf sf)
(defun msdd-gmax1 (n1 n2 n3 n4)
  (max (wickens-cooccurence-g n1 n2 1e-6 (+ n3 n4))
       (wickens-cooccurence-g 1e-6 (+ n1 n2) n3 n4)))

(ftype msdd-gmax2 sf sf sf sf sf)
(defun msdd-gmax2 (n1 n2 n3 n4)
  (max (let ((tmp1 (+ n2 n3 n4)))
         (if (<= n1 tmp1)
             ;; using 1e-6 instead of 0 to prevent division-by-zero
             (wickens-cooccurence-g n1 1e-6 1e-6 tmp1)
             (let ((all/2 (/ (+ n1 tmp1) 2)))
               (wickens-cooccurence-g all/2 1e-6 1e-6 all/2))))
       (cond
         ((>= n1 (abs (- n2 n3)))
          (let ((tmp2 (+ n1 n2 n3)))
            (wickens-cooccurence-g 1e-6 tmp2 tmp2 n4)))
         ((> n2 n3)
          (wickens-cooccurence-g 1e-6 n2 (+ n1 n3) n4))
         (t
          (wickens-cooccurence-g 1e-6 (+ n1 n2) n3 n4)))))

(ftype contingency-table node simple-bit-vector (values sf sf sf sf))
(defun contingency-table (node array)
  (ematch* (array node)
    (((array :dimensions (list batch 2 width))
      (node data mask))
     (let* ((n1 1e-6) (n2 1e-6) (n3 1e-6) (n4 1e-6)
            (width2 (* 2 width))
            (matching (make-array width2 :element-type 'bit))
            (prec-mask (fill (make-array width2 :element-type 'bit) 1 :start 0 :end width))
            (succ-mask (fill (make-array width2 :element-type 'bit) 1 :start width))
            (all-true (make-array width2 :element-type 'bit :initial-element 1)))
       (iter (for b below batch)
             (for window =
                  (make-array width2
                              :element-type 'bit
                              :displaced-to array
                              :displaced-index-offset (* b width2)))
             (bit-eqv data window matching)
             (bit-ior matching mask matching)
             (ematch* ((equal all-true (bit-ior matching succ-mask))
                       (equal all-true (bit-ior matching prec-mask)))
               ((t t)     (incf n1))
               ((t nil)   (incf n2))
               ((nil t)   (incf n3))
               ((nil nil) (incf n4))))
       (values n1 n2 n3 n4)))))

(ftype fmax node simple-bit-vector sf)
(defun fmax (node array)
  (match node
    ((node successor-*)
     (multiple-value-call
         (if (find 0 successor-*)
             ;; non-empty successor
             #'msdd-gmax1
             ;; empty successor
             #'msdd-gmax2)
       (contingency-table node array)))))

;;; MSDD algorithm

(ftype expand node list)
(defun expand (node)
  (match node
    ((node data mask)
     (flet ((specify (multitoken index what)
              (let ((mt2 (copy-multitoken multitoken)))
                (setf (aref mt2 index) what)
                mt2)))
       ;; specify 1 bit of the precursor or the successor.
       ;; Since the precursor and the successor are the displaced arrays to
       ;; a single underlying data array,
       ;; we can iterate over the underlying array.
       (let ((rightmost (or (position 0 mask :from-end t) -1)))
         (iter (for i from (1+ rightmost) below (length data))
               (collect (node (specify data i 0) (specify mask i 0)))
               (collect (node (specify data i 1) (specify mask i 0)))))))))

(defun progress (width)
  (let ((count 0))
    (lambda (&optional (char #\.))
      (princ char)
      (incf count)
      (when (< width count)
        (progn (setf count 0)
               (terpri))))))

(defun bistate-msdd (array g-threashold)
  "A modification of Oates, Cohen, ICML16 on binary variables with lag fixed to 1.
Also, instead of working on the sequence of states, it works on individual pairs of states."
  (match array
    ((array :dimensions (list _ 2 width))
     (let ((acc nil)
           (open (list (node (multitoken (* 2 width))
                             (multitoken (* 2 width)))))
           (max-open 0)
           (progress (progress 60)))
       (pprint-logical-block (*standard-output* nil)
         (pprint-newline :mandatory)
         (iter (while open)
               (for top = (pop open))
               (when (> g-threashold (fmax top array))
                 (next-iteration))
               (funcall progress)
               (iter (for child in (expand top))
                     (for g = (multiple-value-call
                                  #'wickens-cooccurence-g
                                (contingency-table child array)))
                     (push child open)
                     (when (>= g g-threashold)
                       (push (cons g child) acc)))
               (maxf max-open (length open))))
       (print `(:max-open ,max-open))
       acc))))

(defvar *g-threshold* 500)
(setf *print-pretty* nil)
(defun main (&rest args)
  (match args
    ((list* (or "-g" "--threashold") (read *g-threshold*) rest)
     (apply #'main rest))
    ((list* (or "-p" "--profile") rest)
     (swank:profile-reset)
     (swank:profile-package :msdd t nil)
     (apply #'main rest)
     (swank:profile-report))
    ((list* (or "-t" "--time") rest)
     (time (apply #'main rest)))
    ((list csv)
     (print (bistate-msdd (bvs-array (read-as-bvs csv)) *g-threshold*)))
    (_
     (format *error-output*
             "Usage: msdd.ros ~
                     [-g,--threashold threashold] ~
                     [-p,--profile] ~
                     [-t,--time] actions.csv"))))

;; (let ((*print-right-margin* 70))
;; (format t "~(~:S~)~%"
;;         (make-domain (read-as-lists csv)))



;;; vim: set ft=lisp lisp:



